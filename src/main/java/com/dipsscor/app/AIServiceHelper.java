package com.dipsscor.app;


import org.springframework.ai.client.AiClient;
import org.springframework.ai.prompt.PromptTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class AIServiceHelper {

	@Autowired
	AiClient aiClient;

	@Value("${spring.ai.openai.api-key}")
	private String apiKey;

	/**
	 * Generates a response to the provided question using the AI client.
	 *
	 * @param question The question asked by the user.
	 * @return The response generated by the AI client.
	 */
	public String chat(String question){
		/* Initialize Variable */
		PromptTemplate promptTemplate = null;
		try {
			/* Create a prompt template using the question */
			promptTemplate = new PromptTemplate(question);
		}catch(Exception e) {
			e.printStackTrace();
			return e.getMessage();

		}
		/* Generate a response using the AI client and return the text of the generated response */
		return this.aiClient.generate(promptTemplate.create()).getGeneration().getText();
	}

	/**
	 * Generates a document content for the specified topic using the AI client.
	 *
	 * @param topic The topic for which the document content needs to be generated.
	 * @return The generated document content as a string.
	 */
	public String generateDocument(String topic) {
		/* Initialize variable */
		PromptTemplate promptTemplate =null;
		try {

			/* Create a prompt template with place holders for the topic and document content instructions */
			promptTemplate = new PromptTemplate("Generate document content for a {topic}.");

			/* Replace the placeholder {topic} with the actual topic provided */
			promptTemplate.add("topic", topic);
		}catch(Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}

		/* Generate document content using the AI client and return the text of the generated content */
		return this.aiClient.generate(promptTemplate.create()).getGeneration().getText();
	}

}